input {
  tcp {
    port => 5000
    codec => json
  }

  jdbc {
    jdbc_connection_string => "jdbc:postgresql://host.docker.internal:5433/salon"
    jdbc_user => "akerke"
    jdbc_password => "werytcjvcykblccjdbsbcjds"
    jdbc_validate_connection => true
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-jdbc.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    statement => "
      SELECT
        s.*,
        a.state AS state,
        a.city AS city,
        a.street AS street,
        a.house_number AS house_number
      FROM
        public.salon s
      LEFT JOIN
        public.address a
      ON
        s.address_id = a.id
    "
    schedule => "*/30 * * * * *" # every 30 seconds
  }

}

filter {
  if [type] == "jdbc" {
    mutate {
      add_field => {
        "index_name" => "salon_index"
      }
      remove_field => ["street", "city","state", "house_number"]
    }
  }

  if [type] == "tcp" {
    mutate {
      add_field => {
        "index_name" => "springboot-%{app}"
      }
    }
  }

  aggregate {
    task_id => "%{id}"
            code => "
                map['salon_id'] = event.get('id')
                map['name'] = event.get('name')
                map['email'] = event.get('email')
                map['phone'] = event.get('phone')
                map['description'] = event.get('description')
                map['address'] = {
                    'state' => event.get('state'),
                    'street' => event.get('street'),
                    'city' => event.get('city'),
                    'house_number' => event.get('house_number')
                }
            event.cancel()"
            push_previous_map_as_event => true
            timeout => 30
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "%{index_name}"

    document_id => "salon_%{id}"
    doc_as_upsert => true
  }
}
