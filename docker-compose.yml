version: '3'
services:
#  minio:
#    image: quay.io/minio/minio
#    container_name: minio
#    volumes:
#      - ./storage-service/data:/data
#    ports:
#      - "9000:9000"
#      - "9090:9090"
#    environment:
#      MINIO_ROOT_USER: 'minioadmin'
#      MINIO_ROOT_PASSWORD: 'minioadmin'
#      MINIO_ADDRESS: ':9000'
#      MINIO_CONSOLE_ADDRESS: ':9090'
#    command: minio server /data
#
#  zookeeper:
#    container_name: kafka
#    image: confluentinc/cp-zookeeper:latest
#    networks:
#      - broker-kafka
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#
#  kafka:
#    container_name: kafka
#    image: confluentinc/cp-kafka:latest
#    networks:
#      - broker-kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#  kafdrop:
#    container_name: kafka-ui
#    image: obsidiandynamics/kafdrop:latest
#    networks:
#      - broker-kafka
#    depends_on:
#      - kafka
#    ports:
#      - "19000:9000"
#    environment:
#      KAFKA_BROKERCONNECT: kafka:29092
#  postgres:
#    container_name: postgres
#    image: postgres:15.1
#    environment:
#      POSTGRES_USER: akerke
#      POSTGRES_PASSWORD: werytcjvcykblccjdbsbcjds
#      POSTGRES_DB: salon
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#
#  discovery:
#    image: rnbsrva/discovery
#    container_name: discovery
#    ports:
#      - "8761:8761"
#    environment:
#      'eureka.client.serviceUrl.defaultZone': 'http://server-akerke.fibo.cloud:8761/eureka'
#
#
#  redis:
#    image: redis
#    container_name: redis
#    command: redis-server --appendonly yes --requirepass qwerfvp.o654ijnQWE.RFVP654O.IJN --replica-read-only no
#    ports:
#      - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.3
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
      - logstash

  logstash:
    build:
      context: ./docker/logstash  # The build context directory
      dockerfile: Dockerfile
    image: my-logstash
#    image: docker.elastic.co/logstash/logstash:8.3.3
    container_name: logstash
    volumes:
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"

    depends_on:
      - elasticsearch



volumes:
  elasticsearch_data:
    driver: local
  postgres_data: { }
  minio_storage: { }
networks:
  broker-kafka:
    driver: bridge
